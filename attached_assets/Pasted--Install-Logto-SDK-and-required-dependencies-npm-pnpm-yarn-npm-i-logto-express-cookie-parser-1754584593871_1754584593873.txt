
Install Logto SDK and required dependencies
npm
pnpm
yarn

npm i @logto/express cookie-parser express-session
npm i @logto/express cookie-parser express-session
2
Prepare configs and required middlewares
Prepare configuration for the Logto client:

app.ts

import type { LogtoExpressConfig } from '@logto/express';

const config: LogtoExpressConfig = {
  endpoint: 'https://xcijil.logto.app/',
  appId: '9lh53x5ejoufbdyho0uar',
  appSecret: 'mVEiFXUw2kN0ufLmJtLzyxbUPI4een5l',
  baseUrl: 'http://localhost:3000', // Change to your own base URL
};
import type { LogtoExpressConfig } from '@logto/express';

const config: LogtoExpressConfig = {
  endpoint: 'https://xcijil.logto.app/',
  appId: '9lh53x5ejoufbdyho0uar',
  appSecret: 'mVEiFXUw2kN0ufLmJtLzyxbUPI4een5l',
  baseUrl: 'http://localhost:3000', // Change to your own base URL
};
The SDK requires  to be configured in prior.

app.ts

import cookieParser from 'cookie-parser';
import session from 'express-session';

app.use(cookieParser());
app.use(session({ secret: 'UPLGawFSwB81sFbRkblt79s1KO8pmBDi', cookie: { maxAge: 14 * 24 * 60 * 60 } }));
import cookieParser from 'cookie-parser';
import session from 'express-session';

app.use(cookieParser());
app.use(session({ secret: 'UPLGawFSwB81sFbRkblt79s1KO8pmBDi', cookie: { maxAge: 14 * 24 * 60 * 60 } }));
3
Register auth routes
The SDK provides a helper function handleAuthRoutes to register 3 routes:

/logto/sign-in: Sign in with Logto.
/logto/sign-in-callback: Handle sign-in callback.
/logto/sign-out: Sign out with Logto.
Add the following code to your app:

app.ts

import { handleAuthRoutes } from '@logto/express';

app.use(handleAuthRoutes(config));
import { handleAuthRoutes } from '@logto/express';

app.use(handleAuthRoutes(config));
4
Configure redirect URIs
2 URIs
Before we dive into the details, here's a quick overview of the end-user experience. The sign-in process can be simplified as follows:

1. Invoke sign-in
2. Finish sign-in
Your app
Logto
Your app invokes the sign-in method.
The user is redirected to the Logto sign-in page. For native apps, the system browser is opened.
The user signs in and is redirected back to your app (configured as the redirect URI).
This authentication process follows the  protocol, and Logto enforces strict security measures to protect user sign-in.
If you have multiple apps, you can use the same identity provider (Logto). Once the user signs in to one app, Logto will automatically complete the sign-in process when the user accesses another app.
To learn more about the rationale and benefits of redirect-based sign-in, see .

In the following steps, we assume your app is running on http://localhost:3000/.

Now, let's configure your redirect URI. E.g. http://localhost:3000/callback.

Redirect URI
Required
Just like signing in, users should be redirected to Logto for signing out of the shared session. Once finished, it would be great to redirect the user back to your website. For example, add http://localhost:3000/ as the post sign-out redirect URI below.

Post sign-out redirect URI
5
Implement sign-in and sign-out
With the routes registered, now let's implement the sign-in and sign-out buttons in the home page. We need to redirect the user to the sign-in or sign-out route when needed. To help with this, use withLogto to inject authentication status to req.user.

app.ts

import { withLogto } from '@logto/express';

app.get('/', withLogto(config), (req, res) => {
  res.setHeader('content-type', 'text/html');

  if (req.user.isAuthenticated) {
    res.end(`<div>Hello ${req.user.claims?.sub}, <a href="/logto/sign-out">Sign Out</a></div>`);
  } else {
    res.end('<div><a href="/logto/sign-in">Sign In</a></div>');
  }
});
import { withLogto } from '@logto/express';

app.get('/', withLogto(config), (req, res) => {
  res.setHeader('content-type', 'text/html');

  if (req.user.isAuthenticated) {
    res.end(`<div>Hello ${req.user.claims?.sub}, <a href="/logto/sign-out">Sign Out</a></div>`);
  } else {
    res.end('<div><a href="/logto/sign-in">Sign In</a></div>');
  }
});
6
Checkpoint: Test your application
Now, you can test your application:

Run your application, you will see the sign-in button.
Click the sign-in button, the SDK will init the sign-in process and redirect you to the Logto sign-in page.
After you signed in, you will be redirected back to your application and see the sign-out button.
Click the sign-out button to sign out.
7
Further readings
